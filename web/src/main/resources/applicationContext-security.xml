<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.2.xsd"
default-lazy-init="true">
	<!-- kaptcha -->
	<!-- 
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg type="java.util.Properties">
					<props>
						<prop key="kaptcha.image.width">100</prop>
						<prop key="kaptcha.image.height">60</prop>
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                        <prop key="kaptcha.textproducer.char.string">0123456789abcdefghijklmnopqrstuvwxyz</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	 -->

	<!-- check user login status by filter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    	<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/login.jsp" />
		<!-- 登录成功后要跳转的连接 -->
		<property name="successUrl" value="index/welcome" />
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<property name="unauthorizedUrl" value="/401.jsp" />
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->		
		<property name="filterChainDefinitions">
			<value>
				 <!-- 资源 -->
				/ = anon
				/404.html = anon
                /lib/** = anon
                /static/** = anon
                /images/** = anon  
                /script/** = anon    
	      		/login.jsp=anon
	      		/login/loginAjax=anon
	      		/401.jsp=anon
	      		/captcha/create=anon	           		
	      		/download/**=anon	
	      		/ueditor/** = anon       
	      		/ueditor/upload/** = anon        	 		
	      		/index/welcome=authc,riAccess		        
		        /**=authc,riAccess
			</value>
			<!-- /** = needLogin permissive : no check access, only work when use 
				a FormAuthenticationFilter or subclass needLogin : check by needLogin filter 
				@see configuration under this. anon : anonymous access -->
		</property>
		<property name="filters">
			<map>
				<entry key="needLogin" value-ref="needLoginAuthenticationFilter" />
				<entry key="riAccess"><bean class="com.arts.org.web.security.InvalidAccessAuthorizationFilter"/></entry>
				<entry key="permControl"><bean class="com.arts.org.web.security.PermissionsAuthorizationFilter"/></entry>
			</map>
		</property>
	</bean>

	<!-- check user login filter -->
	<bean id="needLoginAuthenticationFilter" class="com.arts.org.webcomn.security.CaptchaFormAuthenticationFilter" />


	<!-- dao for shiro -->
	<bean id="authenticationRealm" class="com.arts.org.web.security.WebCaptchaUserAuthorizingRealm">
		<property name="authorizationCacheName" value="authorization" />
	</bean>
	<!-- cache for shiro -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>
	<!-- security manager -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="authenticationRealm" />
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>

	<!-- setup SecurityUtils -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<!-- make Shiro's lifecyclebean working -->
	<bean id="shiroLifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>